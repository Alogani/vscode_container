#!/bin/sh
set -e

APP_PREFIX="org.vscode_server"
TARGET_USER="codeserver"
CONFIGS="/opt/vscode_container"
BIN="/usr/local/bin/vscode_container"
ICON="$CONFIGS/icon.png"
# default image
IMAGE="docker.io/codercom/code-server:latest"

usage() {
  cat <<EOF
Usage: $0 [--isolated] [--custom-image IMAGE] <command> <args>

Global flags:
  --isolated               copy \$CONFIGS/local and \$CONFIGS/config into each container dir
  --custom-image IMAGE     override default code-server image

Commands:
  create   <name>         create a new container and desktop app
  clone    <src>  [dst]   clone an existing container
  exec     <name> <cmd>   run command as root (/bin/sh to get a shell)
  launch   <name>         run as gui inside a webview.
                          Will be closed with the webview
  mount    <name> <src> [dst] [...]  mount using bindfs with uid mapping 
  umount   <name> <dst>
  refresh  <name>         recreate a container but keep the config files
  remove   <name>         remove with all its configuration
  start    <name>         start in the background without gui
  stop     <name>         stop the background container
  list                    list all containers
  podman   [...]          pass through to podman
EOF
  exit 1
}

#––– parse global flags –––#
OPTS=$(getopt -o '' --long isolated,custom-image: -n 'vscode_container' -- "$@")
[ $? -eq 0 ] || usage
eval set -- "$OPTS"

ISOLATED="false"
while true; do
  case "$1" in
    --isolated)    ISOLATED="true"; shift ;;
    --custom-image) IMAGE="$2"; shift 2 ;;
    --)            shift; break ;;
    *)             usage ;;
  esac
done

# now $1 is the command, $2... are its args
COMMAND="$1"; shift || true

#––– common helpers –––#
require() { [ -n "$1" ] || { echo "Error: missing argument"; exit 1; }; }

exec_codeserver() {
    sudo -u "$TARGET_USER" --login "$@"
}

# prepare the directory structure (but never rm -rf it!)
setup_dirs() {
  NAME="$1"
  D="$CONFIGS/$NAME"
  exec_codeserver mkdir -p "$D/project"
  exec_codeserver mkdir -p "$D/shared"
  exec_codeserver chmod 777 "$D/shared"
  if [ "$ISOLATED" = "true" ]; then
    exec_codeserver cp -a "$CONFIGS/local" "$D/local"
    exec_codeserver cp -a "$CONFIGS/config" "$D/config"
  else
    exec_codeserver ln -sf "$CONFIGS/local"  "$D/local"
    exec_codeserver ln -sf "$CONFIGS/config" "$D/config"
  fi
}

# action = "run" | "create", name = container name
new_container() {
  ACTION="$1"; NAME="$2"
  D="$CONFIGS/$NAME"
  [ "$ACTION" = "create" ] && CMD="podman create" || CMD="podman run -d"
  exec_codeserver $CMD --name "$NAME" \
    -p 127.0.0.1::8080 \
    -v "$D/local:/home/coder/.local" \
    -v "$D/config:/home/coder/.config" \
    -v "$D/project:/home/coder/project" \
    -v "$D/shared:/home/coder/shared:rshared" \
    -e "DOCKER_USER=$TARGET_USER" \
    -u "$(id -u $TARGET_USER):$(id -g $TARGET_USER)" \
    --userns=keep-id \
    $IMAGE
}

write_desktop() {
  NAME="$1"
  DPATH="$HOME/.local/share/applications/$APP_PREFIX.$NAME.desktop"
  cat > "$DPATH" <<EOF
[Desktop Entry]
Name=VSCode $NAME
Categories=Development;
Comment=Spin up vscode dev environment
Exec=$BIN launch $NAME
Icon=$ICON
Terminal=false
Type=Application
EOF
}

#––– commands –––#
case "$COMMAND" in

  create)
    NAME="$1"; require "$NAME"
    setup_dirs   "$NAME"
    new_container run "$NAME"
    write_desktop "$NAME"
    exec_codeserver podman stop "$NAME"
    echo "Config at $CONFIGS/$NAME/config/code-server/config.yaml:"
    exec_codeserver cat "$CONFIGS/$NAME/config/code-server/config.yaml"
    ;;

  clone)
    SRC="$1"; require "$SRC"
    DST="${2:-${SRC}_clone}"
    # fail if dst already exists
    if exec_codeserver podman container exists "$DST" 2>/dev/null; then
      echo "Error: target container '$DST' already exists." >&2
      exit 1
    fi
    cp -ra "$CONFIGS/$SRC" "$CONFIGS/$DST"
    new_container create "$DST"
    write_desktop "$DST"
    echo "Cloned '$SRC' → '$DST'"
    ;;

  exec)
    NAME="$1"; require "$NAME"
    CMD=$@; require "$CMD"
    exec_codeserver podman exec -u 0 -it "$NAME" $CMD
    ;;

  launch)
    NAME="$1"; require "$NAME"
    exec_codeserver podman start "$NAME" >/dev/null
    PORT=$(exec_codeserver podman port "$NAME" | awk -F: '{print $2}')
    webview.py "$APP_PREFIX.$NAME" "$NAME" "$PORT"
    exec_codeserver podman stop "$NAME"
    ;;

  mount)
    NAME="$1"; require "$NAME"; shift
    SRC="$1"; require "$SRC"; shift

    # Determine alias path
    case "$1" in
      -*) ALIAS="$(basename "$SRC")" ;;
      "") ALIAS="$(basename "$SRC")" ;;
      *)  ALIAS="$1"; shift ;;
    esac

    DST="$CONFIGS/$NAME/shared/$ALIAS"

    # Collect options into a list (positional parameters)
    OPTS=""
    while [ $# -gt 0 ] && echo "$1" | grep -q '^-'; do
      OPTS="$OPTS \"$1\""
      shift
    done

    mkdir -p "$DST"
    bindfs -u $(id -u $TARGET_USER) -g $(id -g $TARGET_USER) \
       $OPTS "$SRC" "$DST"

    echo "Mounted $SRC → $DST"
    ;;
  
  umount)
    NAME="$1"; require "$NAME"
    DST="$CONFIGS/$NAME/shared/$2"; require "$DST"
    fusermount -u "$DST" 
    rmdir "$DST"
    ;;

  refresh)
    NAME="$1"; require "$NAME"
    echo "Removing old container..."
    exec_codeserver podman rm -f "$NAME"
    echo "Re-creating container (preserving $CONFIGS/$NAME)…"
    new_container run  "$NAME"
    exec_codeserver podman stop "$NAME"
    echo "Refreshed '$NAME'."
    ;;

  remove)
    NAME="$1"; require "$NAME"
    exec_codeserver podman rm -f "$NAME"
    exec_codeserver rm -rf "$CONFIGS/$NAME"
    rm -f "$HOME/.local/share/applications/$APP_PREFIX.$NAME.desktop"
    ;;

  start)
    NAME="$1"; require "$NAME"
    exec_codeserver podman start "$NAME"
    PORT=$(exec_codeserver podman port "$NAME" | awk -F: '{print $2}')
    echo "Listening on port $PORT"
    ;;

  stop)
    NAME="$1"; require "$NAME"
    exec_codeserver podman stop "$NAME"
    ;;

  list)
    exec_codeserver podman ps --all
    ;;

  podman)
    # pass everything to podman
    exec_codeserver podman "$@"
    ;;

  *)
    usage
    ;;
esac
